// vite.config.mjs
import { defineConfig, loadEnv } from "file:///C:/Users/Administrator/Desktop/project/Caile-ERP-Vue3%20-%20%E5%89%AF%E6%9C%AC/node_modules/vite/dist/node/index.js";
import path3 from "path";

// vite/plugins/index.js
import vue from "file:///C:/Users/Administrator/Desktop/project/Caile-ERP-Vue3%20-%20%E5%89%AF%E6%9C%AC/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// vite/plugins/auto-import.js
import autoImport from "file:///C:/Users/Administrator/Desktop/project/Caile-ERP-Vue3%20-%20%E5%89%AF%E6%9C%AC/node_modules/unplugin-auto-import/dist/vite.js";
function createAutoImport() {
  return autoImport({
    imports: [
      "vue",
      "vue-router",
      "pinia"
    ],
    dts: false
  });
}

// vite/plugins/svg-icon.js
import { createSvgIconsPlugin } from "file:///C:/Users/Administrator/Desktop/project/Caile-ERP-Vue3%20-%20%E5%89%AF%E6%9C%AC/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";
function createSvgIcon(isBuild) {
  return createSvgIconsPlugin({
    iconDirs: [
      path.resolve(process.cwd(), "src/assets/icons/svg"),
      path.resolve(process.cwd(), "src/assets/icons/Buildings"),
      path.resolve(process.cwd(), "src/assets/icons/Business"),
      path.resolve(process.cwd(), "src/assets/icons/Device"),
      path.resolve(process.cwd(), "src/assets/icons/Document"),
      path.resolve(process.cwd(), "src/assets/icons/Others"),
      path.resolve(process.cwd(), "src/assets/icons/System"),
      path.resolve(process.cwd(), "src/assets/icons/User")
    ],
    symbolId: "icon-[dir]-[name]",
    svgoOptions: isBuild
  });
}

// vite/plugins/compression.js
import compression from "file:///C:/Users/Administrator/Desktop/project/Caile-ERP-Vue3%20-%20%E5%89%AF%E6%9C%AC/node_modules/vite-plugin-compression/dist/index.mjs";
function createCompression(env) {
  const { VITE_BUILD_COMPRESS } = env;
  const plugin = [];
  if (VITE_BUILD_COMPRESS) {
    const compressList = VITE_BUILD_COMPRESS.split(",");
    if (compressList.includes("gzip")) {
      plugin.push(
        compression({
          ext: ".gz",
          deleteOriginFile: false
        })
      );
    }
    if (compressList.includes("brotli")) {
      plugin.push(
        compression({
          ext: ".br",
          algorithm: "brotliCompress",
          deleteOriginFile: false
        })
      );
    }
  }
  return plugin;
}

// vite/plugins/setup-extend.js
import setupExtend from "file:///C:/Users/Administrator/Desktop/project/Caile-ERP-Vue3%20-%20%E5%89%AF%E6%9C%AC/node_modules/vite-plugin-vue-setup-extend/dist/index.mjs";
function createSetupExtend() {
  return setupExtend();
}

// vite/plugins/index.js
function createVitePlugins(viteEnv, isBuild = false) {
  const vitePlugins = [vue()];
  vitePlugins.push(createAutoImport());
  vitePlugins.push(createSetupExtend());
  vitePlugins.push(createSvgIcon(isBuild));
  isBuild && vitePlugins.push(...createCompression(viteEnv));
  return vitePlugins;
}

// src/generate/generateFiles.js
import path2 from "path";
import fs from "fs";
var __vite_injected_original_dirname = "C:\\Users\\Administrator\\Desktop\\project\\Caile-ERP-Vue3 - \u526F\u672C\\src\\generate";
function generate() {
  const dir = path2.join(__vite_injected_original_dirname, "../views/commonFiles");
  const mainDir = path2.join(dir, "main");
  console.log("Running cleanup script...");
  if (fs.existsSync(dir)) {
    fs.rmSync(dir, { recursive: true, force: true });
    console.log(`Deleted ${dir}`);
  } else {
    console.log(`${dir} does not exist.`);
  }
  fs.mkdirSync(dir, { recursive: true });
  fs.mkdirSync(mainDir, { recursive: true });
  for (let i = 1; i <= 100; i++) {
    const mainFileName = `common${i}.vue`;
    const mainFilePath = path2.join(mainDir, mainFileName);
    const mainFileContent = `<template>
<ex-render/>
</template>

<script>
export default {
   name: 'common${i}_main'
}
</script>
`;
    fs.writeFileSync(mainFilePath, mainFileContent);
  }
  console.log("writeFile commonFiles");
}

// vite.config.mjs
var __vite_injected_original_dirname2 = "C:\\Users\\Administrator\\Desktop\\project\\Caile-ERP-Vue3 - \u526F\u672C";
generate();
var vite_config_default = defineConfig(({ mode, command }) => {
  const env = loadEnv(mode, process.cwd());
  const { VITE_APP_ENV, VITE_APP_BASE_API, VITE_APP_BACKEND, VITE_APP_PORT } = env;
  return {
    // 部署生产环境和开发环境下的URL。
    // 默认情况下，vite 会假设你的应用是被部署在一个域名的根路径上
    // 例如 https://www.ruoyi.vip/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.ruoyi.vip/admin/，则设置 baseUrl 为 /admin/。
    base: VITE_APP_ENV === "production" ? "/" : "/",
    plugins: createVitePlugins(env, command === "build"),
    resolve: {
      // https://cn.vitejs.dev/config/#resolve-alias
      alias: {
        // 设置路径
        "~": path3.resolve(__vite_injected_original_dirname2, "./"),
        // 设置别名
        "@": path3.resolve(__vite_injected_original_dirname2, "./src")
      },
      // https://cn.vitejs.dev/config/#resolve-extensions
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"]
    },
    // vite 相关配置
    server: {
      port: VITE_APP_PORT,
      host: true,
      open: true,
      proxy: {
        [VITE_APP_BASE_API]: {
          target: VITE_APP_BACKEND,
          changeOrigin: true,
          rewrite: (p) => p.replace(new RegExp("^" + VITE_APP_BASE_API), "")
        }
      }
    },
    //fix:error:stdin>:7356:1: warning: "@charset" must be the first rule in the file
    css: {
      postcss: {
        plugins: [
          {
            postcssPlugin: "internal:charset-removal",
            AtRule: {
              charset: (atRule) => {
                if (atRule.name === "charset") {
                  atRule.remove();
                }
              }
            }
          }
        ]
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
